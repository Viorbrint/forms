// <auto-generated />
using System;
using Forms.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Forms.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Forms.Data.Entities.Answer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<string>("FormId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("QuestionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answer");

                    b.HasDiscriminator().HasValue("Answer");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Forms.Data.Entities.Comment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TemplateId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("TemplateId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Forms.Data.Entities.Form", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TemplateId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.HasIndex("UserId");

                    b.ToTable("Forms");
                });

            modelBuilder.Entity("Forms.Data.Entities.Question", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("IsVisibleInResults")
                        .HasColumnType("boolean");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TemplateId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Forms.Data.Entities.Tag", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TagName")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Forms.Data.Entities.Template", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TopicId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("TopicId");

                    b.ToTable("Templates");
                });

            modelBuilder.Entity("Forms.Data.Entities.TemplateAccess", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId", "TemplateId");

                    b.HasIndex("TemplateId");

                    b.ToTable("TemplateAccesses");
                });

            modelBuilder.Entity("Forms.Data.Entities.TemplateLike", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId", "TemplateId");

                    b.HasIndex("TemplateId");

                    b.ToTable("TemplateLikes");
                });

            modelBuilder.Entity("Forms.Data.Entities.Topic", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("TopicName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TopicName")
                        .IsUnique();

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            TopicName = "Education"
                        },
                        new
                        {
                            Id = "2",
                            TopicName = "Quiz"
                        },
                        new
                        {
                            Id = "3",
                            TopicName = "Feedback"
                        },
                        new
                        {
                            Id = "4",
                            TopicName = "Polls"
                        },
                        new
                        {
                            Id = "5",
                            TopicName = "Health"
                        },
                        new
                        {
                            Id = "6",
                            TopicName = "Job Application"
                        },
                        new
                        {
                            Id = "7",
                            TopicName = "Research"
                        },
                        new
                        {
                            Id = "8",
                            TopicName = "Event Planning"
                        },
                        new
                        {
                            Id = "9",
                            TopicName = "Customer Satisfaction"
                        },
                        new
                        {
                            Id = "10",
                            TopicName = "Product Feedback"
                        },
                        new
                        {
                            Id = "11",
                            TopicName = "Lifestyle"
                        },
                        new
                        {
                            Id = "12",
                            TopicName = "Hobbies and Interests"
                        },
                        new
                        {
                            Id = "13",
                            TopicName = "Entertainment"
                        },
                        new
                        {
                            Id = "14",
                            TopicName = "Travel"
                        },
                        new
                        {
                            Id = "15",
                            TopicName = "Community"
                        },
                        new
                        {
                            Id = "16",
                            TopicName = "Survey"
                        },
                        new
                        {
                            Id = "17",
                            TopicName = "Personal Development"
                        },
                        new
                        {
                            Id = "18",
                            TopicName = "Technology"
                        },
                        new
                        {
                            Id = "19",
                            TopicName = "Sports and Fitness"
                        },
                        new
                        {
                            Id = "20",
                            TopicName = "Other"
                        });
                });

            modelBuilder.Entity("Forms.Data.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TagTemplate", b =>
                {
                    b.Property<string>("TagsId")
                        .HasColumnType("text");

                    b.Property<string>("TemplatesId")
                        .HasColumnType("text");

                    b.HasKey("TagsId", "TemplatesId");

                    b.HasIndex("TemplatesId");

                    b.ToTable("TagTemplate");
                });

            modelBuilder.Entity("Forms.Data.Entities.BooleanAnswer", b =>
                {
                    b.HasBaseType("Forms.Data.Entities.Answer");

                    b.Property<bool>("AnswerBoolean")
                        .HasColumnType("boolean");

                    b.HasIndex("FormId");

                    b.HasDiscriminator().HasValue("BooleanAnswer");
                });

            modelBuilder.Entity("Forms.Data.Entities.MultiLineAnswer", b =>
                {
                    b.HasBaseType("Forms.Data.Entities.Answer");

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("FormId");

                    b.HasDiscriminator().HasValue("MultiLineAnswer");
                });

            modelBuilder.Entity("Forms.Data.Entities.NumberAnswer", b =>
                {
                    b.HasBaseType("Forms.Data.Entities.Answer");

                    b.Property<int>("AnswerNumber")
                        .HasColumnType("integer");

                    b.HasIndex("FormId");

                    b.HasDiscriminator().HasValue("NumberAnswer");
                });

            modelBuilder.Entity("Forms.Data.Entities.SingleLineAnswer", b =>
                {
                    b.HasBaseType("Forms.Data.Entities.Answer");

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("FormId");

                    b.ToTable("Answer", t =>
                        {
                            t.Property("AnswerText")
                                .HasColumnName("SingleLineAnswer_AnswerText");
                        });

                    b.HasDiscriminator().HasValue("SingleLineAnswer");
                });

            modelBuilder.Entity("Forms.Data.Entities.Answer", b =>
                {
                    b.HasOne("Forms.Data.Entities.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Forms.Data.Entities.Comment", b =>
                {
                    b.HasOne("Forms.Data.Entities.User", "Author")
                        .WithMany("Comments")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Forms.Data.Entities.Template", "Template")
                        .WithMany("Comments")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Forms.Data.Entities.Form", b =>
                {
                    b.HasOne("Forms.Data.Entities.Template", "Template")
                        .WithMany("Forms")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Forms.Data.Entities.User", "User")
                        .WithMany("Forms")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Forms.Data.Entities.Question", b =>
                {
                    b.HasOne("Forms.Data.Entities.Template", "Template")
                        .WithMany("Questions")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Forms.Data.Entities.Template", b =>
                {
                    b.HasOne("Forms.Data.Entities.User", "Author")
                        .WithMany("Templates")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Forms.Data.Entities.Topic", "Topic")
                        .WithMany("Templates")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("Forms.Data.Entities.TemplateAccess", b =>
                {
                    b.HasOne("Forms.Data.Entities.Template", "Template")
                        .WithMany("TemplateAccesses")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Forms.Data.Entities.User", "User")
                        .WithMany("TemplateAccesses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Forms.Data.Entities.TemplateLike", b =>
                {
                    b.HasOne("Forms.Data.Entities.Template", "Template")
                        .WithMany("Likes")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Forms.Data.Entities.User", "User")
                        .WithMany("TemplateLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Forms.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Forms.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Forms.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Forms.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TagTemplate", b =>
                {
                    b.HasOne("Forms.Data.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Forms.Data.Entities.Template", null)
                        .WithMany()
                        .HasForeignKey("TemplatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Forms.Data.Entities.BooleanAnswer", b =>
                {
                    b.HasOne("Forms.Data.Entities.Form", "Form")
                        .WithMany("BooleanAnswers")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Form");
                });

            modelBuilder.Entity("Forms.Data.Entities.MultiLineAnswer", b =>
                {
                    b.HasOne("Forms.Data.Entities.Form", "Form")
                        .WithMany("MultiLineAnswers")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Form");
                });

            modelBuilder.Entity("Forms.Data.Entities.NumberAnswer", b =>
                {
                    b.HasOne("Forms.Data.Entities.Form", "Form")
                        .WithMany("NumberAnswers")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Form");
                });

            modelBuilder.Entity("Forms.Data.Entities.SingleLineAnswer", b =>
                {
                    b.HasOne("Forms.Data.Entities.Form", "Form")
                        .WithMany("SingleLineAnswers")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Form");
                });

            modelBuilder.Entity("Forms.Data.Entities.Form", b =>
                {
                    b.Navigation("BooleanAnswers");

                    b.Navigation("MultiLineAnswers");

                    b.Navigation("NumberAnswers");

                    b.Navigation("SingleLineAnswers");
                });

            modelBuilder.Entity("Forms.Data.Entities.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Forms.Data.Entities.Template", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Forms");

                    b.Navigation("Likes");

                    b.Navigation("Questions");

                    b.Navigation("TemplateAccesses");
                });

            modelBuilder.Entity("Forms.Data.Entities.Topic", b =>
                {
                    b.Navigation("Templates");
                });

            modelBuilder.Entity("Forms.Data.Entities.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Forms");

                    b.Navigation("TemplateAccesses");

                    b.Navigation("TemplateLikes");

                    b.Navigation("Templates");
                });
#pragma warning restore 612, 618
        }
    }
}
